// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL_SUPABASE_CONNECTION_POOLING")
  shadowDatabaseUrl = env("DATABASE_URL_LOCAL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  address       String?
  address2      String?
  city          String?
  postcode      String?
  country       String?
  phoneNumber   String?
  role          Role      @default(USER)
  carts         Cart[]
  orders        Order[]
}

enum Role {
  USER
  ADMIN
}

model Product {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String?
  unit         String?
  slug         String?    @unique
  description  String?
  price        Float      @default(1.0)
  published    Boolean    @default(true)
  stockCount   Int        @default(0)
  categories   Category[]
  mainPhotoUrl String?
  available    Boolean    @default(false)
  cartItems    CartItem[]
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String?
  icon      String?
  products  Product[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String?    @unique
  user      User?      @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  cartId    Int?     @unique
  cart      Cart?    @relation(fields: [cartId], references: [id])
  Orders    Order[]
}

model Order {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  status          String     @default("NEW_ORDER")
  userId          String?
  user            User?      @relation(fields: [userId], references: [id])
  CartItems       CartItem[]
  deliveryAddress Json?
}

model DatabaseCheck {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  note      String?  @default("NEW CHECK")
  source    String?
}
